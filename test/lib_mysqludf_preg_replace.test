##############################
#
# @file lib_mysqludf_preg_replace.test
#
# This is a file that can be run through mysqltest in order to perform some
# basic for the libmysql_udf_preg_replace UDF.  This should
# usually be invoked through the 'make test' command in ../Makefile.
# To record new test results, use: make lib_mysqludf_preg_replace.result
#
#
#############################

####################################################

# kill the fox
SELECT PREG_REPLACE('/fox/i' , '' ,  'the quick brown fox' ,2 );

# make the  fox dark green
SELECT PREG_REPLACE('/brown/i' , 'dark green' ,  'the quick brown fox' ,2 );

# reverse the words
SELECT PREG_REPLACE('/([^\\s]+)(\\s)([^\\s]+)(\\s+)([^\\s]+)(\\s)(.*)/' , '$7$6$5$4$3$2$1' ,  'the quick brown fox' );

# Empty pattern
SELECT PREG_REPLACE(  '//' , 'a' , 'bbb' );

##### Replace new with old   ####
#SELECT PREG_REPLACE( '/new/i' ,'old', description  ) FROM state WHERE description LIKE 'new%' ;

#### Replace word after new in state with Old
SELECT PREG_REPLACE( '/(new)(\\s+)([a-zA-Z]*)(.*)/i' ,'$1$2 Old$4', description  ) FROM state WHERE description LIKE 'new%' ;

#### Reverse state
SELECT PREG_REPLACE( '/([^\\s]*)(\\s+)([^\\s]*)/' ,'$3 $1', description  ) FROM state WHERE PREG_RLIKE( '/^[a-z]+\\s+[a-z]+$/i',description);

###### Check NULL stufff (Bug #4)
SELECT PREG_REPLACE ('/a*/',NULL, 'America');
SELECT PREG_REPLACE (NULL ,'foo', 'America');
SELECT PREG_REPLACE ('/a*/' ,'foo', NULL);


######### try some none-constant patterns & replacements
#
--disable_warnings
DROP TABLE IF EXISTS `patterns`;
--enable_warnings

CREATE TABLE `patterns` (
  `pattern` varchar(255) NOT NULL,
  `replacement` varchar(255) NOT NULL
) ENGINE=HEAP DEFAULT CHARSET=latin1;
INSERT INTO `patterns` VALUES 
       ('/new/i','old'),
       ('/(new)(\\s)([a-zA-Z0-9]+)(.*)/i','$3');

SELECT pattern,PREG_REPLACE( pattern, replacement , description ) FROM patterns,state WHERE PREG_RLIKE(pattern , description) ORDER by pattern;

CREATE TABLE `subjects` (
  `subject` LONGBLOB 
) ;
INSERT INTO `subjects` VALUES
       ('The newest version of the library is the best, maybe' );


SELECT pattern,PREG_REPLACE( pattern, replacement , subject ) FROM patterns,subjects WHERE PREG_RLIKE(pattern , subject) ORDER by pattern;

DROP DATABASE IF EXISTS `preg_test`;

